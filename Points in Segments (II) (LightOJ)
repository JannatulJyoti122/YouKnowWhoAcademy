#include<bits/stdc++.h>
using namespace std;
const int N=5e4+9;
int a[N],b[N];
int t[4*N*3];  /// t size depends on id. id could be 3N that's why t's size is 4*N*3
void build(int n,int b,int e){
    if(b==e){
        t[n]=0;
        return;
    }
    int mid=(b+e)/2;
    int left=2*n;
    int right=left+1;
    build(left,b,mid);
    build(right,mid+1,e);
    t[n]=t[left]+t[right];
}
void update(int n,int b,int e,int ind,int val){
    if(b>ind||e<ind) return;
    if(b==e && b==ind){
        t[n]+=val;
        return;
    }
    int mid=(b+e)/2;
    int left=2*n;
    int right=left+1;
    update(left,b,mid,ind,val);
    update(right,mid+1,e,ind,val);
    t[n]=t[left]+t[right];
}
int query(int n,int b,int e,int i,int j){
    if(j<b||e<i) return 0;
    if(i<=b&&e<=j){
        return t[n];
    }
    int mid=(b+e)/2;
    int left=2*n;
    int right=left+1;
    return(query(left,b,mid,i,j)+query(right,mid+1,e,i,j));
}
int main(){
    int tt;
    cin>>tt;
    int cs=0;
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    while(tt--){

        int n,m;
        cin>>n>>m;
        set<int>st;
        for(int i=0;i<n;i++){
            cin>>a[i]>>b[i];
            st.insert(a[i]);
            st.insert(b[i]);
        }
        int q[m];
        for(int i=0;i<m;i++){
            cin>>q[i];
            st.insert(q[i]);
        }
        int id=0;
        map<int,int>mp;
        for(auto it:st){
            mp[it]=++id;
        }
        for(int i=0;i<n;i++){
            a[i]=mp[a[i]];
            b[i]=mp[b[i]];
        }
        for(int i=0;i<m;i++) q[i]=mp[q[i]];
        build(1,1,id);
        for(int i=0;i<n;i++){
            int l=a[i],r=b[i];
            update(1,1,id,l,1);
            if(r+1<=id){
                update(1,1,id,r+1,-1);
            }
        }
        cout<<"Case "<<++cs<<":"<<endl;
        for(int i=0;i<m;i++){
            int x=q[i];
            int ans=0;
            ans=query(1,1,id,1,x);
            cout<<ans<<endl;
        }
    }

}
