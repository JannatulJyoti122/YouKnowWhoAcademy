#include <bits/stdc++.h>
using namespace std;
const int N=1e5+5;
bool found;
bool vis[N];
vector<int>g[N];
vector<int>cycle;
int par[N];
void dfs(int u,int p){
    if(found==true) return;
    vis[u]=true;
    par[u]=p;
    for(auto v:g[u]){
        if(found==true) return;
        if(!vis[v]){
            dfs(v,u);
        }
        else if(v!=p){
            found=true;
            int uu=u;
            while(u!=v){
                cycle.push_back(u);
                u=par[u];
            }
            cycle.push_back(v);
            cycle.push_back(uu);
            return;
        }
    }
}
int main() {
    int n,m;
    cin>>n>>m;
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            dfs(i,0);
        }
    }
    if(found){
        cout<<cycle.size()<<endl;
        for(int i=0;i<cycle.size();i++) cout<<cycle[i]<<" ";
        cout<<endl;
    }
    else cout<<"IMPOSSIBLE\n";
}
