#include <bits/stdc++.h>
using namespace std;

const int N = 1e7;
bitset<N + 1> f;
vector<int> primes;
vector<long long> freq(N + 1, 0), ct(N + 1, 0), prefix(N + 1, 0);

void sieve() {
    for (int i = 2; i <= N; i++) {
        if (!f[i]) {
            primes.push_back(i);
            for (int j = i; j <= N; j += i) {
                f[j] = 1;
                ct[i] += freq[j];
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        if (x <= N) {  // Only store frequency for numbers <= N
            freq[x]++;
        }
    }

    sieve();

    // Compute prefix sums for the valid range [1, N]
    for (int i = 1; i <= N; i++) {
        prefix[i] = prefix[i - 1] + ct[i];
    }

    int m;
    cin >> m;
    while (m--) {
        int x, y;
        cin >> x >> y;

        // Ensure that x and y are within the valid range [2, N]
        x = min(x, N);
        y = min(y, N);
        
        // Now we can safely access prefix[y] and prefix[x-1]
        cout << prefix[y] - prefix[x - 1] << "\n";
    }

    return 0;
}
