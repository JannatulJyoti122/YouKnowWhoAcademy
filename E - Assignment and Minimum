#include<bits/stdc++.h>
using namespace std;
const int N=1e5+9;
long long lazy[4*N];
vector<long long>t(4*N,1);
const long long inf=1e17;
void push(int n,int b,int e){
    if(lazy[n]==-1) return;
    t[n]=lazy[n];
    if(b!=e){
        int lc=2*n; int rc=lc+1;
        lazy[lc]=(lazy[n]);
        lazy[rc]=(lazy[n]);
    }
    lazy[n]=-1;
}
void update(int n,int b,int e,int l,int r,int val){
    push(n,b,e);
    if(b>r || e<l) return;
    if(l<=b&&e<=r){
        lazy[n]=val;
        push(n,b,e);
        return ;
    }
    int mid=(b+e)/2;
    int left=2*n;
    int right=left+1;
    update(left,b,mid,l,r,val);
    update(right,mid+1,e,l,r,val);
    t[n]=min(t[left],t[right]);
}
long long query(int n,int b,int e,int l,int r){
    push(n,b,e);
    if(b>r||e<l) return inf;
    if(l<=b&&e<=r){
        return t[n];
    }
    int mid=(b+e)/2;
    int left=2*n;
    int right=left+1;
    return min(query(left,b,mid,l,r),query(right,mid+1,e,l,r));
}
void build(int n,int b,int e){
    lazy[n]=-1;
    if(b==e){
        t[n]=0;
        return;
    }
    int mid=(b+e)/2;
    int left=2*n,right=left+1;
    build(left,b,mid);
    build(right,mid+1,e);
    t[n]=min(t[left],t[right]);
}
int main(){
    int n,m;
    cin>>n>>m;
    build(1,1,n);
    for(int i=0;i<m;i++){
        int x;
        cin>>x;
        if(x==1){
            int l,r,val;
            cin>>l>>r>>val;
            l++;
            update(1,1,n,l,r,val);
            //for(int i=1;i<=4*n;i++) cout<<t[i]<<" "; cout<<endl;
        }
        else{
            int l,r;
            cin>>l>>r;
            l++;
            cout<<query(1,1,n,l,r)<<endl;
        }
    }
}
