#include <bits/stdc++.h>
using namespace std;
using ll=long long int;
const ll N=100000;
ll a[N+1];
ll t[(4*N)+1];
void build(ll node,ll l,ll r){
    if(l==r){
        t[node]=a[l];
        return;
    }
    ll left=2*node;
    ll right=left+1LL;
    ll mid=(l+r)/2;
    build(left,l,mid);
    build(right,mid+1LL,r);
    t[node]=t[left]+t[right];
}
void update(ll node,ll l,ll r,ll ind,ll val){
    if(r<ind||ind<l) return;
    if(l==r&&l==ind){
        t[node]=val;
        return;
    }
    ll left=2*node;
    ll right=left+1;
    ll mid=(l+r)/2;
    update(left,l,mid,ind,val);
    update(right,mid+1,r,ind,val);
    t[node]=t[left]+t[right];
}
ll query(ll node,ll l,ll r,ll i,ll j){
    if(r<i||j<l) return 0LL;
    if(i<=l&&r<=j) return t[node];
    ll left=2*node;
    ll right=left+1;
    ll mid=(l+r)/2;
    return query(left,l,mid,i,j)+query(right,mid+1LL,r,i,j);
}
int main() {
    ll n,m;
    cin>>n>>m;
    for(ll i=1;i<=n;i++) cin>>a[i];
    build(1,1,n);
    while(m--){
        ll x;
        cin>>x;
        if(x==1){
            ll ind,val;
            cin>>ind>>val;
            ind++;
            update(1LL,1LL,n,ind,val);
        }
        else{
            ll l,r;
            cin>>l>>r;
            l++,r++;
            cout<<query(1LL,1LL,n,l,r-1)<<endl;
        }
    }
}
