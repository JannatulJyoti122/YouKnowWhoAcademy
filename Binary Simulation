#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 9;

struct node {
  int ones, zeroes;
};
string a;
node t[4 * N];
bool lazy[4 * N]; // should invert or not?

void push(int n, int b, int e) {
  if (lazy[n] == false) {
    return;
  }

  swap(t[n].ones, t[n].zeroes);

  // push to the childs
  if (b != e) {
    int mid = (b + e) / 2, l = 2 * n, r = 2 * n + 1;
    // lazy[l] = lazy[l] == true ? false : true;
    // lazy[r] = lazy[r] == true ? false : true;
    lazy[l] ^= true;
    lazy[r] ^= true;
  }

  lazy[n] = false;
}

node merge(node l, node r) {
  node ans;
  ans.ones = l.ones + r.ones;
  ans.zeroes = l.zeroes + r.zeroes;
  return ans;
}
void build(int n, int b, int e) {
  lazy[n] = false;
  if (b == e) {
    t[n].ones = t[n].zeroes = 0;
    if (a[b] == '1') {
      t[n].ones = 1;
    }
    else {
      t[n].zeroes = 1;
    }
    return;
  }
  int mid = (b + e) / 2, l = 2 * n, r = 2 * n + 1;
  build(l, b, mid);
  build(r, mid + 1, e);
  t[n] = merge(t[l], t[r]);
}

void upd(int n, int b, int e, int i, int j) {
  push(n, b, e);
  if (e < i or j < b) return;
  if (b >= i and e <= j) {
    lazy[n] = true; // set lazy
    push(n, b, e);
    return;
  }
  int mid = (b + e) / 2, l = 2 * n, r = 2 * n + 1;
  upd(l, b, mid, i, j);
  upd(r, mid + 1, e, i, j);
  t[n] = merge(t[l], t[r]);
}

node query(int n, int b, int e, int i, int j) {
  push(n, b, e);
  if (e < i or j < b) return {0, 0};
  if (b >= i and e <= j) {
    return t[n];
  }
  int mid = (b + e) / 2, l = 2 * n, r = 2 * n + 1;
  return merge(query(l, b, mid, i, j), query(r, mid + 1, e, i, j));
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int t, cs = 0; cin >> t;
  while (t--) {
    cout << "Case " << ++cs << ":\n";
    cin >> a;
    int n = a.size();
    build(1, 0, n - 1);
    int q; cin >> q;
    while (q--) {
      char ty; cin >> ty;
      if (ty == 'I') {
        int l, r; cin >> l >> r;
        --l; --r; // making them 0 indexed
        upd(1, 0, n - 1, l, r);
      }
      else {
        int i; cin >> i;
        --i; // 0 indexed
        node ans = query(1, 0, n - 1, i, i);
        if (ans.ones == 1) {
          cout << 1 << '\n';
        }
        else {
          cout << 0 << '\n';
        }
      }
    }
  }
  return 0;
}
