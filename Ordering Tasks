#include<bits/stdc++.h>
using namespace std;

const int N = 105;
vector<int> g[N];
int indeg[N];
bool vis[N];
vector<int> dfs_end_time_ord;
void dfs(int u) {
  vis[u] = true;
  for (auto v: g[u]) {
    if (!vis[v]) {
      dfs(v);
    }
  }
  dfs_end_time_ord.push_back(u);
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int n, m;
  while (cin >> n >> m and !(n == 0 and m == 0)) {
    while (m--) {
      int u, v; cin >> u >> v;
      g[u].push_back(v);
      // indeg[v]++;
    }


    for (int i = 1; i <= n; i++) {
      if (!vis[i]) {
        dfs(i);
      }
    }
    reverse(dfs_end_time_ord.begin(), dfs_end_time_ord.end());
    for (auto x: dfs_end_time_ord) {
      cout << x << ' ';
    }
    cout << '\n';

    dfs_end_time_ord.clear();
    for (int i = 1; i <= n; i++) {
      g[i].clear();
      indeg[i] = 0;
      vis[i] = false;
    }
  }
  return 0;
}
